import React, { useState, useRef } from 'react';
import PropTypes from 'prop-types';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';
import DialogContent from '@mui/material/DialogContent';
import TextField from '@mui/material/TextField';
import DialogActions from '@mui/material/DialogActions';
import './AddBookForm.scss';

const AddBookForm = ({ addBook }) => {
  const [open, setOpen] = useState(false);
  const [upload, setUpload] = useState(null); 
  const inputRef = useRef();
  const [newBook, setNewBook] = useState({
    upc: '',
    title: '',
    author: '',
    genre: '',
    price: '',
    imgSrc: '',
    starRating: '',
    status: '',
    description: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewBook({ ...newBook, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setUpload(file); // L∆∞u file v√†o state khi ch·ªçn ·∫£nh
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // T·∫°o FormData ƒë·ªÉ g·ª≠i y√™u c·∫ßu multipart/form-data
    const formData = new FormData();
    formData.append('upc', newBook.upc);
    formData.append('title', newBook.title);
    formData.append('author', newBook.author);
    formData.append('genre', newBook.genre);
    formData.append('price', newBook.price);
    formData.append('starRating', newBook.starRating);
    formData.append('status', newBook.status);
    formData.append('description', newBook.description);

    
    if (upload) {
      formData.append('file', upload); // ƒê√≠nh k√®m file ·∫£nh v√†o FormData
    }

    // G·ª≠i request t·ªõi API ƒë·ªÉ th√™m s√°ch
    try {
      const response = await fetch('https://localhost:7262/api/Book/InsertBook', {
        method: 'POST',
        body: formData, // G·ª≠i FormData ch·ª©a t·∫•t c·∫£ th√¥ng tin, bao g·ªìm file ·∫£nh
      });

      if (response.ok) {
        // G·ªçi addBook ƒë·ªÉ c·∫≠p nh·∫≠t UI
        addBook(await response.json());
        handleClose(); // ƒê√≥ng dialog sau khi th√™m s√°ch th√†nh c√¥ng
      } else {
        alert('L·ªói khi th√™m s√°ch. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi:', error);
      alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server.');
    }
  };

  const handleClose = () => {
    setOpen(false);
    setNewBook({
      upc: '',
      title: '',
      author: '',
      genre: '',
      price: '',
      imgSrc: '',
      starRating: '',
      status: '',
      description: '',
    });
    setUpload(null); // ƒê·∫∑t l·∫°i file upload sau khi ƒë√≥ng form
  };

  return (
    <div>
      <div className="button_addbook">
        <Button variant="outlined" onClick={() => setOpen(true)} className="them_sach">
          Th√™m s√°ch
        </Button>
      </div>
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Th√™m s√°ch m·ªõi</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            name="upc"
            label="UPC"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.upc}
          />
          <TextField
            margin="dense"
            name="title"
            label="Ti√™u ƒë·ªÅ"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.title}
          />
          <TextField
            margin="dense"
            name="author"
            label="T√™n T√°c Gi·∫£"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.author}
          />
          <TextField
            margin="dense"
            name="genre"
            label="Th·ªÉ lo·∫°i"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.genre}
          />
          <TextField
            margin="dense"
            name="price"
            label="Gi√°"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.price}
          />
          <div className="new-input-upload">
          <label className="custom-file-upload">
            <span className="icon-upload">üì§</span>
            Ch·ªçn h√¨nh ·∫£nh
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange} // C·∫≠p nh·∫≠t state khi ch·ªçn file
              ref={inputRef}
            />
          </label>
          {upload && <div className="file-name">T·ªáp ƒë√£ ch·ªçn: {upload.name}</div>}
        </div>

          <TextField
            margin="dense"
            name="status"
            label="T√¨nh Tr·∫°ng"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.status}
          />
          <TextField
            margin="dense"
            name="starRating"
            label="ƒê√°nh Gi√°"
            type="text"
            fullWidth
            variant="outlined"
            onChange={handleChange}
            value={newBook.starRating}
          />

          <TextField
            margin="dense"
            name="description"
            label="M√¥ t·∫£"
            type="text"
            fullWidth
            variant="outlined"
            multiline
            rows={4}
            onChange={handleChange}
            value={newBook.description}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="primary">
            H·ªßy
          </Button>
          <Button onClick={handleSubmit} color="primary">
            Th√™m
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

AddBookForm.propTypes = {
  addBook: PropTypes.func.isRequired,
};

export default AddBookForm;
